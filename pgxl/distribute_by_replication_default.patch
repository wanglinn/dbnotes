diff --git a/src/backend/catalog/heap.c b/src/backend/catalog/heap.c
index 61d220d..aea48c9 100644
--- a/src/backend/catalog/heap.c
+++ b/src/backend/catalog/heap.c
@@ -95,6 +95,9 @@
 /* Potentially set by pg_upgrade_support functions */
 Oid			binary_upgrade_next_heap_pg_class_oid = InvalidOid;
 Oid			binary_upgrade_next_toast_pg_class_oid = InvalidOid;
+#ifdef PGXC
+extern bool distribute_by_replication_default;
+#endif
 
 static void AddNewRelationTuple(Relation pg_class_desc,
 					Relation new_rel_desc,
@@ -1051,6 +1054,11 @@ GetRelationDistributionItems(Oid relid,
 	char local_locatortype = '\0';
 	AttrNumber local_attnum = 0;
 
+#ifdef PGXC
+	if (!distributeby && distribute_by_replication_default)
+		local_locatortype = LOCATOR_TYPE_REPLICATED;
+	else
+#endif
 	if (!distributeby)
 	{
 		/*
diff --git a/src/backend/parser/parse_utilcmd.c b/src/backend/parser/parse_utilcmd.c
index a5c64d0..f6bf102 100644
--- a/src/backend/parser/parse_utilcmd.c
+++ b/src/backend/parser/parse_utilcmd.c
@@ -149,6 +149,10 @@ typedef struct
 bool loose_constraints = false;
 #endif
 
+#ifdef PGXC
+extern bool distribute_by_replication_default;
+#endif
+
 static void transformColumnDefinition(CreateStmtContext *cxt,
 						  ColumnDef *column);
 static void transformTableConstraint(CreateStmtContext *cxt,
@@ -517,6 +521,11 @@ transformCreateStmt(CreateStmt *stmt, const char *queryString)
 			stmt->distributeby->disttype = DISTTYPE_REPLICATION;
 			stmt->distributeby->colname = NULL;
 		}
+		else if (distribute_by_replication_default)
+		{
+			stmt->distributeby->disttype = DISTTYPE_REPLICATION;
+			stmt->distributeby->colname = NULL;
+		}
 		/*
 		 * If there are columns suitable for hash distribution distribute on
 		 * first of them.
diff --git a/src/backend/utils/misc/guc.c b/src/backend/utils/misc/guc.c
index 929506b..c98e4a7 100644
--- a/src/backend/utils/misc/guc.c
+++ b/src/backend/utils/misc/guc.c
@@ -156,6 +156,10 @@ char	   *GUC_check_errmsg_string;
 char	   *GUC_check_errdetail_string;
 char	   *GUC_check_errhint_string;
 
+#ifdef PGXC
+bool distribute_by_replication_default;
+#endif
+
 static void do_serialize(char **destptr, Size *maxbytes, const char *fmt,...) pg_attribute_printf(3, 4);
 
 static void set_config_sourcefile(const char *name, char *sourcefile,
@@ -1833,6 +1837,16 @@ static struct config_bool ConfigureNamesBool[] =
 
 #ifdef PGXC
 	{
+		{"distribute_by_replication_default", PGC_USERSET, CUSTOM_OPTIONS,
+			gettext_noop("Set distribute by replication default."),
+			NULL
+		},
+		&distribute_by_replication_default,
+		false,
+		NULL, NULL, NULL
+	},
+
+	{
 		{"enable_debug_mvcc", PGC_USERSET, QUERY_TUNING_METHOD,
 			gettext_noop("funciton HeapTupleSatisfiesMVCC always return true"),
 			NULL
