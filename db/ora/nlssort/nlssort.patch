diff --git a/src/backend/executor/nodeSort.c b/src/backend/executor/nodeSort.c
index 9223398..8d7163e 100644
--- a/src/backend/executor/nodeSort.c
+++ b/src/backend/executor/nodeSort.c
@@ -19,7 +19,18 @@
 #include "executor/nodeSort.h"
 #include "miscadmin.h"
 #include "utils/tuplesort.h"
+#ifdef ADB_GRAM_ORA
+#include "access/htup_details.h"
+#include "catalog/pg_collation.h"
+#include "catalog/pg_proc.h"
+#include "utils/builtins.h"
+#include "utils/fmgroids.h"
+#include "utils/syscache.h"
+#endif
 
+#ifdef ADB_GRAM_ORA
+static Oid adbGetCollateOid(char *collNameStr, char *collCollateStr);
+#endif
 
 /* ----------------------------------------------------------------
  *		ExecSort
@@ -43,6 +54,22 @@ ExecSort(PlanState *pstate)
 	ScanDirection dir;
 	Tuplesortstate *tuplesortstate;
 	TupleTableSlot *slot;
+#ifdef ADB_GRAM_ORA
+	ListCell *ceil;
+	HeapTuple tuple;
+	Form_pg_proc procform;
+	TargetEntry *tle;
+	Var *var;
+	AttrNumber origVarattno = -1;
+	AttrNumber varattno = -1;
+	Oid funOid = InvalidOid;
+	int funcCollid = 0;
+	bool getFunc = false;
+	bool getAttno = false;
+	char *ora_nlssort_str = "nlssort";
+	char *collNameStr = "zh_CN";
+	char *collCollateStr = "zh_CN.utf8";
+#endif
 
 	CHECK_FOR_INTERRUPTS();
 
@@ -85,6 +112,112 @@ ExecSort(PlanState *pstate)
 		outerNode = outerPlanState(node);
 		tupDesc = ExecGetResultType(outerNode);
 
+#ifdef ADB_GRAM_ORA
+		if (plannode->numCols == 1)
+		{
+			/* check ora_nlssor function exist */
+			foreach(ceil, outerNode->plan->targetlist)
+			{
+				tle = (TargetEntry *)lfirst(ceil);
+				if (nodeTag(tle->expr) != T_FuncExpr)
+					continue;
+
+				if (tle->expr)
+					funOid = (*(FuncExpr *)(tle->expr)).funcid;
+				else
+					continue;
+
+				if (OidIsValid(funOid))
+				{
+					tuple = SearchSysCache1(PROCOID, ObjectIdGetDatum(funOid));
+					if (!HeapTupleIsValid(tuple))
+						ereport(ERROR,
+								(errcode(ERRCODE_UNDEFINED_FUNCTION),
+								 errmsg("function with OID %u does not exist", funOid)));
+
+					procform = (Form_pg_proc)GETSTRUCT(tuple);
+					Assert(procform);
+					if (strcasecmp(ora_nlssort_str, NameStr(procform->proname)) == 0)
+						getFunc = true;
+
+					ReleaseSysCache(tuple);
+					varattno = tle->resno;
+				}
+
+				if (getFunc)
+					break;
+			}
+
+			if (getFunc)
+			{
+				funcCollid = adbGetCollateOid(collNameStr, collCollateStr);
+				if (OidIsValid(funcCollid))
+				{
+					foreach(ceil, (*(FuncExpr *)tle->expr).args)
+					{
+						Node *arg = (Node *) lfirst(ceil);
+
+						if (IsA(arg, Var))
+						{
+							var = (Var *) arg;
+							origVarattno = var->varattno;
+							getAttno = true;
+							break;
+						}
+						else if (IsA(arg, RelabelType))
+						{
+							if (IsA(((RelabelType *)arg)->arg, Var))
+							{
+								var = (Var *)(((RelabelType *)arg)->arg);
+								origVarattno = var->varattno;
+								getAttno = true;
+								break;
+							}
+						}
+						else if (IsA(arg, FuncExpr))
+						{
+							if (IsA(((FuncExpr *)arg)->args, List))
+							{
+								List *listArgs = ((FuncExpr *)arg)->args;
+								ListCell *cell;
+								void *point;
+								if (list_length(listArgs) == 1)
+								{
+									cell = list_head(listArgs);
+									point = cell->data.ptr_value;
+									if (IsA(point, Var))
+									{
+										var = (Var *) point;
+										origVarattno = var->varattno;
+										getAttno = true;
+										break;
+									}
+								}
+							}
+						}
+					}
+
+					if (getAttno)
+					{
+						foreach(ceil, outerNode->plan->targetlist)
+						{
+							tle = (TargetEntry *)lfirst(ceil);
+							if (tle->resorigcol == origVarattno)
+							{
+								varattno = tle->resno;
+								break;
+							}
+						}
+
+						plannode->collations[0] = funcCollid;
+						plannode->sortColIdx[0] = varattno;
+
+					}
+				}
+			}
+		}
+
+#endif
 		tuplesortstate = tuplesort_begin_heap(tupDesc,
 											  plannode->numCols,
 											  plannode->sortColIdx,
@@ -339,3 +472,47 @@ ExecReScanSort(SortState *node)
 	else
 		tuplesort_rescan((Tuplesortstate *) node->tuplesortstate);
 }
+
+#ifdef ADB_GRAM_ORA
+static Oid
+adbGetCollateOid(char *collNameStr, char *collCollateStr)
+{
+	NameData collName;
+	NameData collCollate;
+	Relation collateRel;
+	HeapTuple tuple;
+	HeapScanDesc relScan;
+	Form_pg_proc procform;
+	ScanKeyData key[2];
+	Oid result = InvalidOid;
+
+	namestrcpy(&collName, collNameStr);
+	namestrcpy(&collCollate, collCollateStr);
+
+	collateRel = heap_open(CollationRelationId, AccessShareLock);
+	ScanKeyInit(&key[0],
+		Anum_pg_collation_collname
+		,BTEqualStrategyNumber
+		,F_NAMEEQ
+		,NameGetDatum(&collName));
+	ScanKeyInit(&key[1],
+		Anum_pg_collation_collcollate
+		,BTEqualStrategyNumber
+		,F_NAMEEQ
+		,NameGetDatum(&collCollate));
+	relScan = heap_beginscan_catalog(collateRel, 2, key);
+	while((tuple = heap_getnext(relScan, ForwardScanDirection)) != NULL)
+	{
+		procform = (Form_pg_proc)GETSTRUCT(tuple);
+		Assert(procform);
+
+		result = HeapTupleGetOid(tuple);
+		break;
+	}
+	heap_endscan(relScan);
+	heap_close(collateRel, AccessShareLock);
+
+	return result;
+}
+
+#endif
\ No newline at end of file
